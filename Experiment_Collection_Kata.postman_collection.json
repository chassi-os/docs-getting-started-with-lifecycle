{
	"info": {
		"_postman_id": "0baa0c8d-1a68-48f8-8fb2-5b73448d2c6f",
		"name": "Experiment_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01-Get Lifecycle Details",
			"item": [
				{
					"name": "Get the Lifecycle ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568d1836-e777-45cd-963d-e81648537ef9",
								"type": "text/javascript",
								"exec": [
									"const lifecycles = pm.response.json();",
									"const lifecycleName = pm.environment.get('lifecycleName');",
									"const lifecycle = lifecycles.find(lifecycle => lifecycle.lifecycleName === lifecycleName);",
									"const found = !!lifecycle;",
									"",
									"pm.test(`${found ? 'Found lifecycle : ' + lifecycle.lifecycleId : `Failed to find the lifecycle named ${lifecycleName}`}`, () => {",
									"    pm.expect(found, `Lifecycle named '${lifecycleName}' could not be found in the list of lifecycles`).to.be.true;",
									"});",
									"",
									"if(!found) return;",
									"",
									"const { lifecycleId, lifecycleVersions } = lifecycle; ",
									"",
									"const exists = lifecycleVersions && lifecycleVersions.length > 0 && !!lifecycleVersions.find(v => v.published);",
									"",
									"pm.test(exists ? 'A published lifecycle version is available to use' : 'Failed to find a published lifecycle version', () => {",
									"    pm.expect(exists, `There are no published lifecycles for ${lifecycleName}, please publish one and retry`).to.be.true",
									"});",
									"",
									"if(!exists) return; ",
									"",
									"",
									"const { versionNo, steps } = lifecycleVersions.sort(function(a, b) {",
									"    if(!a.publicationDate) {",
									"        return +1;",
									"    }",
									"    if(!b.publicationDate) {",
									"        return -1;",
									"    }",
									"    return b.publicationDate.localeCompare(a.publicationDate)",
									"}).shift();",
									"",
									"pm.environment.set('lifecycleId', lifecycleId);",
									"pm.environment.set('versionNo', versionNo);",
									"",
									"",
									"const stepName = pm.environment.get('stepName');",
									"const step = steps.find(step => step.stepName === stepName);",
									"",
									"const hasWantedStep = !!step;",
									"",
									"pm.test(`${hasWantedStep ? `Found step: ${stepName}` : `Failed to find the step named ${stepName}`}`, () => {",
									"    pm.expect(hasWantedStep, `Step named '${stepName}' could not be found in the list of steps`).to.be.true;",
									"});",
									"",
									"if(!hasWantedStep) return; ",
									"",
									"",
									"pm.environment.set('stepId', step.stepId);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tenantAPIDNS}}/{{adminAppSpaceId}}/lifecycle/1/lifecycles",
							"protocol": "https",
							"host": [
								"{{tenantAPIDNS}}"
							],
							"path": [
								"{{adminAppSpaceId}}",
								"lifecycle",
								"1",
								"lifecycles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02-Create a Journey and Track Entities",
			"item": [
				{
					"name": "Create a new Journey (Start Tracking)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f63ad22-fabd-4d75-b983-6142380e159f",
								"type": "text/javascript",
								"exec": [
									"const bodyToPost = {",
									"    \"lifecycleId\": pm.environment.get('lifecycleId'),",
									"    \"versionNo\": pm.environment.get('versionNo'),",
									"    \"entityArray\": [{",
									"        \"entityTypeIdentifier\": \"customerId\",",
									"        \"entityId\": pm.environment.get('chassiCustomerId')",
									"    }],",
									"    \"externalEntityArray\": [{",
									"        \"externalEntityTypeIdentifier\": \"customerId\",",
									"        \"externalEntityId\": pm.environment.get('externalCustomerId')",
									"    }]",
									"};",
									"pm.variables.set(\"jsonBody\", JSON.stringify(bodyToPost));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{jsonBody}}\n"
						},
						"url": {
							"raw": "https://{{tenantAPIDNS}}/{{adminAppSpaceId}}/lifecycle/1/journeys",
							"protocol": "https",
							"host": [
								"{{tenantAPIDNS}}"
							],
							"path": [
								"{{adminAppSpaceId}}",
								"lifecycle",
								"1",
								"journeys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Journey by External Customer ID and Type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ff0a23b-a681-4ca3-b854-31ee90b30a42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b817f338-21e2-4925-a26c-9c1995055559",
								"type": "text/javascript",
								"exec": [
									"const journeyList = pm.response.json();",
									"const lifecycleId = pm.environment.get('lifecycleId');",
									"const journey = journeyList.find(journey => journey.lifecycleId === lifecycleId);",
									"const found = !!journey;",
									"",
									"pm.test(`${found ? `Found journey: ${journey.journeyId}`: 'Failed to find a journey'}`, () => {",
									"    pm.expect(found, 'A journey is required, check the previous POST to confirm its success').to.be.true;",
									"})",
									"",
									"if(!found) return;",
									"",
									"",
									"pm.environment.set('journeyId', journey.journeyId);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{tenantAPIDNS}}/{{adminAppSpaceId}}/lifecycle/1/journeys?externalEntityIdentifiers[]=customerId:{{externalCustomerId}}",
							"protocol": "https",
							"host": [
								"{{tenantAPIDNS}}"
							],
							"path": [
								"{{adminAppSpaceId}}",
								"lifecycle",
								"1",
								"journeys"
							],
							"query": [
								{
									"key": "externalEntityIdentifiers[]",
									"value": "customerId:{{externalCustomerId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03-Change Journey Step",
			"item": [
				{
					"name": "Journey Step Change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94236e70-91a9-4d23-8eee-d9a4d24c01af",
								"type": "text/javascript",
								"exec": [
									"const bodyToPost = {",
									"    \"journeyId\": pm.environment.get(\"journeyId\"),",
									"    \"stepId\": pm.environment.get(\"stepId\")",
									"};",
									"",
									"pm.variables.set(\"jsonBody\", JSON.stringify(bodyToPost));",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d21af9f8-1041-4c84-bc7b-19882473cfc3",
								"type": "text/javascript",
								"exec": [
									"pm.test(`Success! The transitioning from the start step to the ${pm.environment.get('stepName')} step is complete`, () => {",
									"    pm.expect(true).to.be.true;   ",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{jsonBody}}\n"
						},
						"url": {
							"raw": "https://{{tenantAPIDNS}}/{{adminAppSpaceId}}/lifecycle/1/journeys/{{journeyId}}/change-step",
							"protocol": "https",
							"host": [
								"{{tenantAPIDNS}}"
							],
							"path": [
								"{{adminAppSpaceId}}",
								"lifecycle",
								"1",
								"journeys",
								"{{journeyId}}",
								"change-step"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ab416c27-e6eb-47b6-aacb-dba54a216629",
				"type": "text/javascript",
				"exec": [
					"class UrlEncoderBuilder {",
					"    constructor(){",
					"        this.url = ''",
					"    }",
					"    ",
					"    add(key, value){",
					"        if(this.url.length > 0){",
					"            this.url = `${this.url}&${key}=${encodeURIComponent(value)}`;",
					"        } else {",
					"            this.url = `${key}=${encodeURIComponent(value)}`;",
					"        }",
					"        ",
					"        return this;",
					"    }",
					"    ",
					"    build(){ return this.url; }",
					"}",
					"",
					"const echoPostRequest = {",
					"    url: pm.environment.get('authURL'),",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: new UrlEncoderBuilder()",
					"                .add('username', pm.environment.get('username'))",
					"                .add('password', pm.environment.get('userPassword'))",
					"                .add('grant_type', 'password')",
					"                .add('client_id', 'chassi-api')",
					"                .build()",
					"    }",
					"};",
					"",
					"",
					"// console.log( echoPostRequest );",
					"",
					"",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    // console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        var responseJson = res.json();",
					"        pm.environment.set('accessToken', responseJson.access_token)",
					"    }",
					"});",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2e11e27c-b34a-4021-af15-4b4a2b2b3e8d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}